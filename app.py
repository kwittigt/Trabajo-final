import streamlit as st
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from mlp import MLP
import os

# -------------------------------
# Funci√≥n de preprocesamiento de datos
# -------------------------------
def preprocess_data(df):
    df = df.copy()
    
    # Si existe una columna de √≠ndice llamada 'N¬∫', la eliminamos
    if 'N¬∫' in df.columns:
        df = df.drop(columns=['N¬∫'])
    
    # Mapeo de variables categ√≥ricas a valores num√©ricos
    df['A1'] = df['A1'].map({'malo': 0, 'conocido': 1, 'bueno': 2})
    df['A2'] = df['A2'].map({'alto': 0, 'bajo': 1})
    df['A3'] = df['A3'].map({'ninguno': 0, 'adecuado': 1})
    
    # Seleccionamos las caracter√≠sticas de entrada
    X = df[['A1', 'A2', 'A3', 'A4']].values
    
    # Normalizamos las caracter√≠sticas para que est√©n en el mismo rango
    X_min = X.min(axis=0)
    X_max = X.max(axis=0)
    X_norm = (X - X_min) / (X_max - X_min + 1e-8)
    
    # Codificamos la columna 'Clase' en formato one-hot para entrenamiento
    y = df['Clase']
    y_encoded = pd.get_dummies(y).values
    
    return X_norm, y_encoded, X_min, X_max

# -------------------------------
# Interfaz de entrenamiento
# -------------------------------
st.title("üè¶ Sistema de Clasificaci√≥n de Clientes con Red Neuronal")
st.markdown("**Entrene el modelo con un dataset etiquetado (con columna 'Clase')**")

# Subida de archivo de entrenamiento
uploaded_file = st.file_uploader("Subir dataset de entrenamiento (CSV o Excel)", type=["csv", "xlsx"], key="train")
if uploaded_file:
    file_extension = os.path.splitext(uploaded_file.name)[1].lower()
    try:
        # Cargamos el archivo seg√∫n su extensi√≥n
        if file_extension == '.csv':
            df = pd.read_csv(uploaded_file)
        elif file_extension == '.xlsx':
            df = pd.read_excel(uploaded_file)
        else:
            st.error("Formato de archivo no soportado. Use CSV o Excel.")
            st.stop()
            
        st.success("Datos cargados correctamente!")
        st.dataframe(df.head())
        
        # Verificamos que est√©n todas las columnas necesarias
        required_columns = ['A1', 'A2', 'A3', 'A4', 'Clase']
        if not all(col in df.columns for col in required_columns):
            missing = [col for col in required_columns if col not in df.columns]
            st.error(f"Faltan columnas requeridas: {', '.join(missing)}")
            st.stop()
        
        # Preprocesamos los datos
        X, y, X_min, X_max = preprocess_data(df)
        
        # Selecci√≥n de hiperpar√°metros en la barra lateral
        st.sidebar.header("‚öôÔ∏è Hiperpar√°metros")
        learning_rate = st.sidebar.slider("Tasa de aprendizaje", 0.001, 0.5, 0.01)
        epochs = st.sidebar.slider("√âpocas", 100, 5000, 1000)
        hidden_neurons = st.sidebar.slider("Neuronas ocultas", 2, 20, 5)
        
        # Entrenamiento del modelo al presionar el bot√≥n
        if st.button("üîß Entrenar Modelo"):
            # Creamos la red neuronal con la arquitectura definida
            model = MLP(input_size=4, hidden_size=hidden_neurons, output_size=3)
            
            with st.spinner("Entrenando red neuronal..."):
                loss_history = model.train(X, y, learning_rate, epochs)
            
            # Guardamos el modelo y los par√°metros de normalizaci√≥n en session_state
            st.session_state.model = model
            st.session_state.X_min = X_min
            st.session_state.X_max = X_max
            
            # Mostramos la evoluci√≥n de la p√©rdida durante el entrenamiento
            fig, ax = plt.subplots()
            ax.plot(loss_history)
            ax.set_title("Evoluci√≥n de la P√©rdida durante el Entrenamiento")
            ax.set_xlabel("√âpoca")
            ax.set_ylabel("P√©rdida")
            st.pyplot(fig)
            
            # Mostramos la precisi√≥n final sobre los datos de entrenamiento
            accuracy = model.accuracy(X, y)
            st.success(f"‚úÖ Precisi√≥n en datos de entrenamiento: {accuracy*100:.2f}%")
            st.write("**Nota:** 1=Malo, 2=Promedio, 3=Bueno")
    
    except Exception as e:
        st.error(f"Error procesando archivo: {str(e)}")

# -------------------------------
# Predicci√≥n masiva de nuevos clientes
# -------------------------------
st.header("üìÇ Predicci√≥n Masiva de Clientes")
uploaded_pred = st.file_uploader("Subir dataset para predicci√≥n (sin columna 'Clase')", type=["csv", "xlsx"], key="predict")

if uploaded_pred and 'model' in st.session_state:
    file_extension = os.path.splitext(uploaded_pred.name)[1].lower()
    try:
        # Cargamos el archivo de predicci√≥n
        if file_extension == '.csv':
            df_pred = pd.read_csv(uploaded_pred)
        elif file_extension == '.xlsx':
            df_pred = pd.read_excel(uploaded_pred)
        else:
            st.error("Formato de archivo no soportado. Use CSV o Excel.")
            st.stop()

        # Verificamos que est√©n todas las columnas necesarias (sin 'Clase')
        required_columns = ['A1', 'A2', 'A3', 'A4']
        if not all(col in df_pred.columns for col in required_columns):
            missing = [col for col in required_columns if col not in df_pred.columns]
            st.error(f"Faltan columnas requeridas: {', '.join(missing)}")
            st.stop()

        # Mapeamos las variables categ√≥ricas igual que en el entrenamiento
        df_pred['A1'] = df_pred['A1'].map({'malo': 0, 'conocido': 1, 'bueno': 2})
        df_pred['A2'] = df_pred['A2'].map({'alto': 0, 'bajo': 1})
        df_pred['A3'] = df_pred['A3'].map({'ninguno': 0, 'adecuado': 1})

        # Normalizamos usando los par√°metros del entrenamiento
        X_pred = df_pred[['A1', 'A2', 'A3', 'A4']].values
        X_pred_norm = (X_pred - st.session_state.X_min) / (st.session_state.X_max - st.session_state.X_min + 1e-8)

        # Predecimos la clase para cada cliente
        pred_clases = st.session_state.model.predict(X_pred_norm)
        df_pred['Clase_Predicha'] = pred_clases

        st.success("Predicci√≥n realizada. Aqu√≠ est√°n los resultados:")
        st.dataframe(df_pred)

        # ----------- An√°lisis de resultados -----------

        # 1. Gr√°fico: cantidad de clientes por clase predicha
        st.subheader("Distribuci√≥n de Clientes por Clase Predicha")
        clase_counts = df_pred['Clase_Predicha'].value_counts().sort_index()
        clase_labels = {1: "MALO", 2: "PROMEDIO", 3: "BUENO"}
        fig1, ax1 = plt.subplots()
        ax1.bar([clase_labels.get(i, i) for i in clase_counts.index], clase_counts.values, color=['red', 'orange', 'green'])
        ax1.set_xlabel("Clase Predicha")
        ax1.set_ylabel("Cantidad de Clientes")
        ax1.set_title("Cantidad de Clientes por Clase Predicha")
        st.pyplot(fig1)

        # 2. Gr√°fico: caracter√≠sticas m√°s frecuentes en los nuevos clientes
        st.subheader("Caracter√≠sticas M√°s Frecuentes en Nuevos Clientes")
        # Diccionarios para revertir el mapeo num√©rico a texto
        inv_map_A1 = {0: 'malo', 1: 'conocido', 2: 'bueno'}
        inv_map_A2 = {0: 'alto', 1: 'bajo'}
        inv_map_A3 = {0: 'ninguno', 1: 'adecuado'}

        # Si los datos est√°n mapeados, revertimos para mostrar etiquetas
        df_show = df_pred.copy()
        if df_show['A1'].dtype != object:
            df_show['A1'] = df_show['A1'].map(inv_map_A1)
        if df_show['A2'].dtype != object:
            df_show['A2'] = df_show['A2'].map(inv_map_A2)
        if df_show['A3'].dtype != object:
            df_show['A3'] = df_show['A3'].map(inv_map_A3)

        # Contamos la frecuencia de cada valor en cada caracter√≠stica
        freq_A1 = df_show['A1'].value_counts()
        freq_A2 = df_show['A2'].value_counts()
        freq_A3 = df_show['A3'].value_counts()
        freq_A4 = df_show['A4'].value_counts()

        # Mostramos los gr√°ficos de barras para cada caracter√≠stica
        fig2, axs = plt.subplots(1, 4, figsize=(16, 4))
        axs[0].bar(freq_A1.index, freq_A1.values, color='blue')
        axs[0].set_title("A1 (Historia)")
        axs[1].bar(freq_A2.index, freq_A2.values, color='purple')
        axs[1].set_title("A2 (Pasivo)")
        axs[2].bar(freq_A3.index, freq_A3.values, color='brown')
        axs[2].set_title("A3 (Garant√≠a)")
        axs[3].bar(freq_A4.index.astype(str), freq_A4.values, color='gray')
        axs[3].set_title("A4 (Ganancia)")
        for ax in axs:
            ax.set_xticklabels(ax.get_xticklabels(), rotation=45)
        fig2.suptitle("Frecuencia de Caracter√≠sticas en Nuevos Clientes")
        st.pyplot(fig2)

        # Permite descargar los resultados con la clase predicha
        csv = df_pred.to_csv(index=False).encode('utf-8')
        st.download_button("Descargar resultados como CSV", csv, "predicciones.csv", "text/csv")

    except Exception as e:
        st.error(f"Error procesando archivo: {str(e)}")
elif uploaded_pred:
    st.warning("Primero debe entrenar el modelo con un dataset etiquetado.")

# -------------------------------
# Clasificaci√≥n de un solo cliente (simulaci√≥n)
# -------------------------------
st.header("üîÆ Clasificar Nuevo Cliente")
st.subheader("Ingrese las caracter√≠sticas del cliente:")

if 'model' in st.session_state:
    col1, col2 = st.columns(2)
    with col1:
        a1 = st.selectbox("Historia de cr√©ditos", options=['malo', 'conocido', 'bueno'])
        a2 = st.selectbox("Pasivo", options=['alto', 'bajo'])
    with col2:
        a3 = st.selectbox("Garant√≠a", options=['ninguno', 'adecuado'])
        a4 = st.slider("Ganancia", 1, 3, 2)
    
    if st.button("üè∑Ô∏è Predecir Clasificaci√≥n"):
        # Preparamos los datos del cliente para el modelo
        input_data = pd.DataFrame([[a1, a2, a3, a4]], columns=['A1', 'A2', 'A3', 'A4'])
        
        # Mapeamos igual que en el entrenamiento
        input_data['A1'] = input_data['A1'].map({'malo':0, 'conocido':1, 'bueno':2})
        input_data['A2'] = input_data['A2'].map({'alto':0, 'bajo':1})
        input_data['A3'] = input_data['A3'].map({'ninguno':0, 'adecuado':1})
        
        # Normalizamos usando los par√°metros del entrenamiento
        input_norm = (input_data.values - st.session_state.X_min) / (st.session_state.X_max - st.session_state.X_min + 1e-8)
        
        # Predecimos la clase (1, 2, 3)
        prediction = st.session_state.model.predict(input_norm)[0]
        
        # Mostramos el resultado de la predicci√≥n
        st.subheader("Resultado de la Clasificaci√≥n")
        if prediction == 1:
            st.error(f"üî¥ Cliente MALO (Puntuaci√≥n: 1)")
            st.markdown("**Riesgo alto:** Historial crediticio negativo, pasivos altos y garant√≠as insuficientes")
        elif prediction == 2:
            st.warning(f"üü° Cliente PROMEDIO (Puntuaci√≥n: 2)")
            st.markdown("**Riesgo moderado:** Caracter√≠sticas mixtas que requieren evaluaci√≥n adicional")
        else:
            st.success(f"üü¢ Cliente BUENO (Puntuaci√≥n: 3)")
            st.markdown("**Riesgo bajo:** Historial crediticio positivo, pasivos bajos y garant√≠as adecuadas")
        
        # Barra de progreso visual
        st.progress(prediction/3)
        
        # Detalles t√©cnicos para revisi√≥n
        with st.expander("Ver detalles t√©cnicos"):
            st.subheader("Caracter√≠sticas procesadas")
            st.json({
                "A1 (Historia cr√©ditos)": f"{a1} ‚Üí {input_data['A1'].values[0]}",
                "A2 (Pasivo)": f"{a2} ‚Üí {input_data['A2'].values[0]}",
                "A3 (Garant√≠a)": f"{a3} ‚Üí {input_data['A3'].values[0]}",
                "A4 (Ganancia)": a4
            })
            st.subheader("Valores normalizados")
            st.write(input_norm)
else:
    st.warning("‚ö†Ô∏è Primero cargue un dataset de entrenamiento y entrene un modelo")

# -------------------------------
# Informaci√≥n sobre el modelo en la barra lateral
# -------------------------------
st.sidebar.header("‚ÑπÔ∏è Acerca del Modelo")
st.sidebar.markdown("""
Este sistema utiliza una red neuronal multicapa implementada completamente desde cero (sin librer√≠as de ML) para clasificar clientes en 3 categor√≠as:

1. üî¥ **Cliente MALO** (1): Alto riesgo crediticio
2. üü° **Cliente PROMEDIO** (2): Riesgo moderado
3. üü¢ **Cliente BUENO** (3): Bajo riesgo crediticio

El modelo se entrena con datos hist√≥ricos que incluyen 4 caracter√≠sticas:
- Historia crediticia (A1)
- Nivel de pasivos (A2)
- Garant√≠as (A3)
- Nivel de ganancia (A4)
""")